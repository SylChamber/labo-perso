# Déploie CoreDNS en conteneur; destiné pour exécution avec podman kube play
##########################
# Configuration de CoreDNS
# ConfigMap généré à partir des fichiers de configuration avec:
# kubectl create cm coredns --from-file=Corefile=Corefile \
#   --from-file=internal.db=internal.db \
#   --dry-run=client -o yaml
apiVersion: v1
data:
  Corefile: |
    .:53 {
        log
        errors
        health
        ready
        forward . 24.200.241.37 24.201.245.77
    }

    internal:53 {
        file /etc/coredns/internal.db
        log
        errors
    }
  internal.db: |
    ; Vérification du format:
    ; apt install bind9-utils - zypper install bind-utils
    ; named-checkzone internal internal.db

    $ORIGIN internal.
    $TTL 3600
    @       IN      SOA     ns.internal. silicone95.proton.me. (
                            2024030901  ; Serial
                            7200        ; Refresh
                            3600        ; Retry
                            1209600     ; Expire
                            3600 )      ; Negative Cache TTL

    @                   IN      NS      ns.internal.
    ns                  IN      A       192.168.50.115

    arcade              IN      A       192.168.50.185
    ai                  IN      CNAME   arcade.internal.
    ia                  IN      CNAME   arcade.internal.

    imprimante          IN      A       192.168.50.125
    printer             IN      CNAME   imprimante.internal.
    brother_hl_l2465dw  IN      CNAME   imprimante.internal.

    motel               IN      A       192.168.50.115
    ca                  IN      CNAME   motel.internal.
    certificats         IN      CNAME   motel.internal.
    cloud               IN      CNAME   motel.internal.
    k3s                 IN      CNAME   motel.internal.
    kubernetes          IN      CNAME   motel.internal.
    nuage               IN      CNAME   motel.internal.

    routeur             IN      A       192.168.50.1
kind: ConfigMap
metadata:
  labels:
    app: coredns
  name: coredns-config
---
# Déploiement de CoreDNS sous forme de pod
apiVersion: v1
kind: Pod
metadata:
  annotations:
    io.podman.annotations.userns: host
  labels:
    app: coredns
  name: coredns
spec:
  containers:
    - name: coredns-app
      args:
        - -conf
        - /etc/coredns/Corefile
      image: docker.io/coredns/coredns:1.12.4
      ports:
        # en utilisant le network hôte 'hostNetwork', on ne doit pas mapper des ports avec 'hostPort'
        - containerPort: 53
        - containerPort: 53
          protocol: UDP
      # sauf pour limit cpu, valeurs tirées de coredns dans k3s
      resources:
        limits:
          cpu: 200m
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      # securityContext provenant de coredns dans k3s
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
            - NET_BIND_SERVICE
          drop:
            - all
      volumeMounts:
        - name: coredns-config
          mountPath: /etc/coredns
  # requis pour exposer le port 53 sur l'hôte, sinon ça entre en conflit avec le réseau podman qui expose aussi 53
  # https://github.com/containers/podman/issues/19108
  # https://github.com/containers/podman/issues/21019
  hostNetwork: true
  restartPolicy: Always
  volumes:
    - name: coredns-config
      configMap:
        name: coredns-config
